This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-17T12:34:02.643Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
project/
  app/
    api/
      endpoints.py
    models/
      speech_request.py
    services/
      s3.py
      tts.py
    static/
      privacy_policy.html
    main.py
    requirements.txt
  .env.example
  .gitignore
  docker-compose.yml
  Dockerfile
.gitignore

================================================================
Repository Files
================================================================

================
File: project/app/api/endpoints.py
================
from fastapi import APIRouter, HTTPException
from models.speech_request import SpeechRequest
from services.tts import generate_tts_audio
from services.s3 import upload_to_s3
from fastapi.responses import HTMLResponse
import os

router = APIRouter()


@router.post("/generate-speech/")
async def generate_speech(request: SpeechRequest):
    try:
        # TTS音声生成
        local_audio_path = await generate_tts_audio(request.text)

        # S3にアップロード
        s3_url = await upload_to_s3(local_audio_path, "speech/")

        # ローカルファイルを削除
        os.remove(local_audio_path)

        return {"file_url": s3_url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/privacy-policy", response_class=HTMLResponse)
async def privacy_policy():
    try:
        with open("static/privacy_policy.html", "r", encoding="utf-8") as file:
            content = file.read()
        return HTMLResponse(content=content)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Privacy Policy not found")

================
File: project/app/models/speech_request.py
================
from pydantic import BaseModel


class SpeechRequest(BaseModel):
    text: str

================
File: project/app/services/s3.py
================
import boto3
import os
from botocore.exceptions import NoCredentialsError
from fastapi import HTTPException

s3_client = boto3.client(
    "s3",
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    region_name=os.getenv("AWS_REGION", "us-east-1"),
)


async def upload_to_s3(file_path: str, prefix: str) -> str:
    bucket = os.getenv("S3_BUCKET_NAME")
    object_name = f"{prefix}{os.path.basename(file_path)}"
    try:
        s3_client.upload_file(file_path, bucket, object_name)
        file_url = f"https://{bucket}.s3.amazonaws.com/{object_name}"
        return file_url
    except FileNotFoundError:
        raise HTTPException(status_code=400, detail="File not found for upload")
    except NoCredentialsError:
        raise HTTPException(status_code=500, detail="AWS credentials not available")

================
File: project/app/services/tts.py
================
import uuid
from dotenv import load_dotenv
from openai import OpenAI
from pathlib import Path

client = OpenAI()

# 環境変数の読み込み
load_dotenv()


async def generate_tts_audio(text: str) -> str:
    """
    OpenAI TTS APIを使用して音声ファイルを生成し、ローカルに保存する関数。
    See: https://platform.openai.com/docs/api-reference/audio/createSpeech#audio-createspeech-voice

    Args:
        text (str): 音声生成の元になるテキスト

    Returns:
        str: 保存された音声ファイルのローカルパス
    """
    try:

        # OpenAI TTS APIへのリクエスト
        response = client.audio.speech.create(
            model="tts-1", input=text, voice="onyx", speed=1.25
        )

        # ユニークなファイル名を生成
        file_name = f"{uuid.uuid4()}.mp3"
        file_path = f"/tmp/{file_name}"  # 一時ファイルディレクトリに保存

        response.stream_to_file(file_path)

        return file_path

    except Exception as e:
        raise Exception(f"Error generating TTS audio: {e}")

================
File: project/app/static/privacy_policy.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Privacy Policy</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0 20px;
      }
      header {
        text-align: center;
        padding: 20px 0;
      }
      section {
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Privacy Policy</h1>
    </header>
    <section>
      <h2>Introduction</h2>
      <p>
        We are committed to protecting your privacy. This Privacy Policy
        outlines how we handle your data when you use our service.
      </p>
    </section>
    <section>
      <h2>Data We Do Not Collect</h2>
      <p>
        Our application does not collect or store any personally identifiable
        information (PII) from users. Additionally, we do not save the text
        input you provide during the use of our services.
      </p>
    </section>
    <section>
      <h2>How We Process and Store Data</h2>
      <p>
        When you use our text-to-speech (TTS) service, the input text you
        provide is sent to our API for processing. This data is used solely to
        generate the requested audio. While we do not store text inputs, audio
        files generated through the service are retained for functionality and
        may remain accessible for a limited time via their respective URLs.
      </p>
    </section>
    <section>
      <h2>Third-Party Services</h2>
      <p>
        We may use third-party services, such as cloud providers, to deliver
        audio files. These services operate independently, and we ensure they
        comply with privacy regulations.
      </p>
    </section>
    <section>
      <h2>Your Privacy Rights</h2>
      <p>
        Since no personal user data is stored, you do not need to request data
        access, modification, or deletion from us. Should this policy change, we
        will update this document and notify users accordingly.
      </p>
    </section>
    <section>
      <h2>Changes to This Policy</h2>
      <p>
        We reserve the right to update this Privacy Policy at any time. Changes
        will be reflected on this page, along with the date of the last update.
      </p>
    </section>
    <footer>
      <p>Last updated: December 1, 2024</p>
    </footer>
  </body>
</html>

================
File: project/app/main.py
================
from fastapi import FastAPI
from api.endpoints import router


app = FastAPI()
app.include_router(router)

================
File: project/app/requirements.txt
================
fastapi
aiohttp
uvicorn
python-dotenv
openai
boto3

================
File: project/.env.example
================
OPENAI_API_KEY=<your_openai_api_key>
AWS_ACCESS_KEY_ID=<your_aws_access_key>
AWS_SECRET_ACCESS_KEY=<your_aws_secret_key>
S3_BUCKET_NAME=<your_s3_bucket_name>
AWS_REGION=<your_region>  # e.g., us-east-1

================
File: project/.gitignore
================
.env
repomix-output.txt
.DS_Store

================
File: project/docker-compose.yml
================
version: "3.9"
services:
  app:
    build: .
    ports:
      - "10000:10000"
    volumes:
      - ./app:/usr/src/app
    env_file:
      - ./.env

================
File: project/Dockerfile
================
# Use an official Python runtime as a parent image
FROM python:3.10-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy the application files into the container
COPY ./app /usr/src/app

# Install the dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Expose port 10000
# The default value of PORT is 10000 for all Render web services
EXPOSE 10000

# Command to run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "10000", "--reload"]

================
File: .gitignore
================
.DS_Store
**/__pycache__/**
__pycache__/
*.pyc
# repomix-output.txt
